// Generated by IcedCoffeeScript 108.0.11
(function() {
  this.PagerModel = function(url, querystrings, withoutLoad, fnLoaded, fnBound) {
    var self;
    self = this;
    self.Url = ko.observable(url);
    self.QueryStrings = ko.observable(querystrings || '');
    self.Items = ko.observableArray([]);
    self.CurrentPage = ko.observable(0);
    self.PageSize = ko.observable(1);
    self.TotalItemCount = ko.observable(0);
    self.IsLoading = ko.observable(false);
    self.HasError = ko.observable(false);
    self.OnLoaded = fnLoaded;
    self.OnBound = fnBound;
    self.Reload = function(qs) {
      if (typeof qs !== "undefined") {
        self.QueryStrings(qs);
        return self.OnPage(1);
      } else {
        return self.OnPage(self.CurrentPage());
      }
    };
    self.OnPage = function(p) {
      self.CurrentPage(p);
      if (typeof self.AjaxUrl !== "undefined" || self.Url() !== "undefined") {
        self.IsLoading(true);
        url = typeof self.AjaxUrl !== "undefined" ? self.AjaxUrl() : self.Url();
        if (!url) {
          console.error("Please specify the url for ajax.");
          return;
        }
        if (self.QueryStrings()) {
          url += url.indexOf("?") > 0 ? "&" : "?";
          url += self.QueryStrings();
        }
        if (url.indexOf("pageIndex=") > 0) {
          url = url.replace(/pageIndex=\d+(?=&|$)/g, "pageIndex=" + p);
        } else {
          url += url.indexOf('?') < 0 ? '?' : '&';
          url += "pageIndex=" + p;
        }
        dialog.loading();
        $.post(url.split('?')[0], url.split('?')[1], function(data) {
          var handledData;
          self.HasError(false);
          if ($.isArray(data.Items) && data.Items.length === 0 && self.CurrentPage() > 1) {
            self.OnPage(p - 1);
            return;
          }
          if (self.OnLoaded) {
            handledData = self.OnLoaded(data);
            if (typeof handledData !== 'undefined') {
              data = handledData;
              ko.mapping.fromJS(handledData, {}, self);
            } else {
              ko.mapping.fromJS(data, {}, self);
            }
          } else {
            ko.mapping.fromJS(data, {}, self);
          }
          if (self.OnBound) {
            return self.OnBound(data);
          }
        },'json').fail(function(args) {
          self.HasError(true);
          if (self.OnError) {
            return self.OnError(args);
          } else {
            return console.error(args);
          }
        }).always(function() {
          self.IsLoading(false);
          return dialog.loaded();
        });
      }
    };
    if (typeof url !== "undefined" && !withoutLoad) {
      self.OnPage(1);
    }
  };

  ko.components.register("ko-pager", {
    viewModel: function(params) {
      var self;
      self = this;
      if (typeof params.model === "undefined") {
        console.error("Please specify the model of params attribute for ko-pager component.");
      }
      self.model = params.model;
      if ($.isFunction(self.model.CurrentPage)) {
        self.pageNumber = self.model.CurrentPage;
      } else {
        self.pageNumber = ko.observable(self.model.CurrentPage);
      }
      if ($.isFunction(self.model.PageSize)) {
        self.pageSize = self.model.PageSize;
      } else {
        self.pageSize = ko.observable(self.model.PageSize);
      }
      if ($.isFunction(self.model.TotalItemCount)) {
        self.itemTotal = self.model.TotalItemCount;
      } else {
        self.itemTotal = ko.observable(self.model.TotalItemCount);
      }
      if ($.isFunction(self.model.HasError)) {
        self.hasError = self.model.HasError;
      } else {
        self.hasError = ko.observable(false);
      }
      if ($.isFunction(self.model.IsLoading)) {
        self.isLoading = self.model.IsLoading;
      } else {
        self.isLoading = ko.observable(false);
      }
      self.changePage = self.model.OnPage;
      self.pageCount = function() {
        var pc, _ref;
        pc = Math.floor(self.itemTotal() / self.pageSize()) + ((_ref = self.itemTotal() % self.pageSize() > 0) != null ? _ref : {
          1: 0
        });
        if (pc > 1000) {
          return 1000;
        }
        return pc;
      };
      self.pageNumbers = (function() {
        var p, pc, pn, results, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
        results = [];
        pc = self.pageCount();
        pn = self.pageNumber();
        if (pc <= 9) {
          for (p = _i = 1; 1 <= pc ? _i <= pc : _i >= pc; p = 1 <= pc ? ++_i : --_i) {
            results.push(p);
          }
        } else {
          for (p = _j = 1; _j <= 2; p = ++_j) {
            results.push(p);
          }
          if (pn <= 5) {
            for (p = _k = 3; _k <= 7; p = ++_k) {
              results.push(p);
            }
            results.push(-1);
          } else if (pn >= pc - 4) {
            results.push(-1);
            for (p = _l = _ref = pc - 6, _ref1 = pc - 2; _ref <= _ref1 ? _l <= _ref1 : _l >= _ref1; p = _ref <= _ref1 ? ++_l : --_l) {
              results.push(p);
            }
          } else {
            results.push(-1);
            for (p = _m = _ref2 = pn - 2, _ref3 = pn + 2; _ref2 <= _ref3 ? _m <= _ref3 : _m >= _ref3; p = _ref2 <= _ref3 ? ++_m : --_m) {
              results.push(p);
            }
            results.push(-1);
          }
          for (p = _n = _ref4 = pc - 1; _ref4 <= pc ? _n <= pc : _n >= pc; p = _ref4 <= pc ? ++_n : --_n) {
            results.push(p);
          }
        }
        return results;
      }).bind(self);
      self.page = function(p) {
        var url;
        if (p < 0 || self.pageNumber() === p) {
          return;
        }
        if (self.changePage) {
          self.changePage(p);
        } else {
          url = location.href;
          if (url.indexOf("pageIndex=") > 0) {
            url = url.replace(/pageIndex=\d+(?=&|$)/g, "pageIndex=" + p);
          } else {
            url += url.indexOf('?') > 0 ? "&" : "?";
            url += "pageIndex=" + p;
          }
          location.href = url;
        }
      };
    },
    template: '<nav class="page-bar" aria-label="Page navigation" data-bind="visible: itemTotal() > 0">\n <ul class="pagination pagination-sm" data-bind="visible: pageCount() > 1">\n   <div class="summary" data-bind="visible: !hasError()">\n 共<span data-bind="text: pageCount()"></span>页&nbsp;&nbsp;<span class="red" data-bind="text:itemTotal()"></span>条记录\n  </div>\n    <li data-bind="click: function(){ page(pageNumber()>1?pageNumber()-1:1) }">\n      <a href="#" aria-label="Previous">\n        <span aria-hidden="true">上一页</span>\n      </a>\n    </li>\n    <!-- ko foreach: pageNumbers() -->\n    <li data-bind="css:{active: $parent.pageNumber() == $data, disabled: $data < 0}, click: $parent.page">\n        <a href="#" data-bind="text: $data, visible: $data > 0"></a>\n        <a href="#" data-bind="visible: $data < 0">...</a>\n    </li>\n    <!-- /ko -->\n    <li data-bind="click: function(){ page(pageNumber()< pageCount() ? pageNumber()+1 : pageCount()) }">\n      <a href="#" aria-label="Next">\n        <span aria-hidden="true">下一页</span>\n      </a>\n    </li>\n  </ul>\n  <div class="clearfix"></div>\n</nav> '
  });

  ko.components.register("ko-pager-state", {
    viewModel: function(params) {
      var self;
      self = this;
      self.Items = params.model && params.model.Items ? params.model.Items : ko.observableArray([]);
      self.IsLoading = params.model && params.model.IsLoading ? params.model.IsLoading : ko.observable(false);
    },
    template: '<div class="text-center">\n    <div data-bind="visible: Items().length == 0 && !IsLoading()">\n        <ko-nodata></ko-nodata>\n    </div>\n    <!--\n    <div data-bind="visible: IsLoading()">\n        <ko-loading></ko-loading>\n    </div>\n    -->\n</div>'
  });

}).call(this);
